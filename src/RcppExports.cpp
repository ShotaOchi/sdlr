// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/sdlr.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getAudioDevicesCpp
Rcpp::StringVector getAudioDevicesCpp();
RcppExport SEXP _sdlr_getAudioDevicesCpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getAudioDevicesCpp());
    return rcpp_result_gen;
END_RCPP
}
// makeSDLAUDIO
Rcpp::XPtr<SDLAUDIO> makeSDLAUDIO(const std::string& file);
RcppExport SEXP _sdlr_makeSDLAUDIO(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLAUDIO(file));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLAUDIOint
Rcpp::XPtr<SDLAUDIO> makeSDLAUDIOint(const std::string& file, const int idx_dev);
RcppExport SEXP _sdlr_makeSDLAUDIOint(SEXP fileSEXP, SEXP idx_devSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type idx_dev(idx_devSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLAUDIOint(file, idx_dev));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLAUDIOstring
Rcpp::XPtr<SDLAUDIO> makeSDLAUDIOstring(const std::string& file, const std::string& devname);
RcppExport SEXP _sdlr_makeSDLAUDIOstring(SEXP fileSEXP, SEXP devnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type devname(devnameSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLAUDIOstring(file, devname));
    return rcpp_result_gen;
END_RCPP
}
// clearSDLAUDIO
void clearSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_clearSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    clearSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// getstatusSDLAUDIO
Rcpp::StringVector getstatusSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_getstatusSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getstatusSDLAUDIO(ptr));
    return rcpp_result_gen;
END_RCPP
}
// pauseSDLAUDIO
void pauseSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_pauseSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    pauseSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// unpauseSDLAUDIO
void unpauseSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_unpauseSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    unpauseSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// queueSDLAUDIO
void queueSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_queueSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    queueSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// displaySDLRIMAGEnumeric
void displaySDLRIMAGEnumeric(const Rcpp::NumericVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int x, const int y, const int renderer_idx, const int max_count);
RcppExport SEXP _sdlr_displaySDLRIMAGEnumeric(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP xSEXP, SEXP ySEXP, SEXP renderer_idxSEXP, SEXP max_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    Rcpp::traits::input_parameter< const int >::type max_count(max_countSEXP);
    displaySDLRIMAGEnumeric(vec, width, height, colfmt, chorder, title, x, y, renderer_idx, max_count);
    return R_NilValue;
END_RCPP
}
// displaySDLRIMAGEraw
void displaySDLRIMAGEraw(const Rcpp::RawVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int x, const int y, const int renderer_idx, const int max_count);
RcppExport SEXP _sdlr_displaySDLRIMAGEraw(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP xSEXP, SEXP ySEXP, SEXP renderer_idxSEXP, SEXP max_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    Rcpp::traits::input_parameter< const int >::type max_count(max_countSEXP);
    displaySDLRIMAGEraw(vec, width, height, colfmt, chorder, title, x, y, renderer_idx, max_count);
    return R_NilValue;
END_RCPP
}
// makeSDLRIMAGEnumeric
Rcpp::XPtr<SDLRIMAGE> makeSDLRIMAGEnumeric(const Rcpp::NumericVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int x, const int y, const int renderer_idx);
RcppExport SEXP _sdlr_makeSDLRIMAGEnumeric(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP xSEXP, SEXP ySEXP, SEXP renderer_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLRIMAGEnumeric(vec, width, height, colfmt, chorder, title, x, y, renderer_idx));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLRIMAGEraw
Rcpp::XPtr<SDLRIMAGE> makeSDLRIMAGEraw(const Rcpp::RawVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int x, const int y, const int renderer_idx);
RcppExport SEXP _sdlr_makeSDLRIMAGEraw(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP xSEXP, SEXP ySEXP, SEXP renderer_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLRIMAGEraw(vec, width, height, colfmt, chorder, title, x, y, renderer_idx));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLRIMAGEnumericC
Rcpp::XPtr<SDLRIMAGE> makeSDLRIMAGEnumericC(const Rcpp::NumericVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int renderer_idx);
RcppExport SEXP _sdlr_makeSDLRIMAGEnumericC(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP renderer_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLRIMAGEnumericC(vec, width, height, colfmt, chorder, title, renderer_idx));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLRIMAGErawC
Rcpp::XPtr<SDLRIMAGE> makeSDLRIMAGErawC(const Rcpp::RawVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int renderer_idx);
RcppExport SEXP _sdlr_makeSDLRIMAGErawC(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP renderer_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLRIMAGErawC(vec, width, height, colfmt, chorder, title, renderer_idx));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLRIMAGEnumericU
Rcpp::XPtr<SDLRIMAGE> makeSDLRIMAGEnumericU(const Rcpp::NumericVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int renderer_idx);
RcppExport SEXP _sdlr_makeSDLRIMAGEnumericU(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP renderer_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLRIMAGEnumericU(vec, width, height, colfmt, chorder, title, renderer_idx));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLRIMAGErawU
Rcpp::XPtr<SDLRIMAGE> makeSDLRIMAGErawU(const Rcpp::RawVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder, const std::string& title, const int renderer_idx);
RcppExport SEXP _sdlr_makeSDLRIMAGErawU(SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP, SEXP titleSEXP, SEXP renderer_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type title(titleSEXP);
    Rcpp::traits::input_parameter< const int >::type renderer_idx(renderer_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLRIMAGErawU(vec, width, height, colfmt, chorder, title, renderer_idx));
    return rcpp_result_gen;
END_RCPP
}
// deleteSDLRIMAGE
void deleteSDLRIMAGE(Rcpp::XPtr<SDLRIMAGE> ptr);
RcppExport SEXP _sdlr_deleteSDLRIMAGE(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLRIMAGE> >::type ptr(ptrSEXP);
    deleteSDLRIMAGE(ptr);
    return R_NilValue;
END_RCPP
}
// replaceSDLRIMAGEraw
void replaceSDLRIMAGEraw(Rcpp::XPtr<SDLRIMAGE> ptr, const Rcpp::RawVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder);
RcppExport SEXP _sdlr_replaceSDLRIMAGEraw(SEXP ptrSEXP, SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLRIMAGE> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    replaceSDLRIMAGEraw(ptr, vec, width, height, colfmt, chorder);
    return R_NilValue;
END_RCPP
}
// replaceSDLRIMAGEnumeric
void replaceSDLRIMAGEnumeric(Rcpp::XPtr<SDLRIMAGE> ptr, const Rcpp::NumericVector& vec, const int width, const int height, const std::string& colfmt, const std::string& chorder);
RcppExport SEXP _sdlr_replaceSDLRIMAGEnumeric(SEXP ptrSEXP, SEXP vecSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colfmtSEXP, SEXP chorderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLRIMAGE> >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colfmt(colfmtSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chorder(chorderSEXP);
    replaceSDLRIMAGEnumeric(ptr, vec, width, height, colfmt, chorder);
    return R_NilValue;
END_RCPP
}
// SDLR_QUIT
void SDLR_QUIT();
RcppExport SEXP _sdlr_SDLR_QUIT() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    SDLR_QUIT();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sdlr_getAudioDevicesCpp", (DL_FUNC) &_sdlr_getAudioDevicesCpp, 0},
    {"_sdlr_makeSDLAUDIO", (DL_FUNC) &_sdlr_makeSDLAUDIO, 1},
    {"_sdlr_makeSDLAUDIOint", (DL_FUNC) &_sdlr_makeSDLAUDIOint, 2},
    {"_sdlr_makeSDLAUDIOstring", (DL_FUNC) &_sdlr_makeSDLAUDIOstring, 2},
    {"_sdlr_clearSDLAUDIO", (DL_FUNC) &_sdlr_clearSDLAUDIO, 1},
    {"_sdlr_getstatusSDLAUDIO", (DL_FUNC) &_sdlr_getstatusSDLAUDIO, 1},
    {"_sdlr_pauseSDLAUDIO", (DL_FUNC) &_sdlr_pauseSDLAUDIO, 1},
    {"_sdlr_unpauseSDLAUDIO", (DL_FUNC) &_sdlr_unpauseSDLAUDIO, 1},
    {"_sdlr_queueSDLAUDIO", (DL_FUNC) &_sdlr_queueSDLAUDIO, 1},
    {"_sdlr_displaySDLRIMAGEnumeric", (DL_FUNC) &_sdlr_displaySDLRIMAGEnumeric, 10},
    {"_sdlr_displaySDLRIMAGEraw", (DL_FUNC) &_sdlr_displaySDLRIMAGEraw, 10},
    {"_sdlr_makeSDLRIMAGEnumeric", (DL_FUNC) &_sdlr_makeSDLRIMAGEnumeric, 9},
    {"_sdlr_makeSDLRIMAGEraw", (DL_FUNC) &_sdlr_makeSDLRIMAGEraw, 9},
    {"_sdlr_makeSDLRIMAGEnumericC", (DL_FUNC) &_sdlr_makeSDLRIMAGEnumericC, 7},
    {"_sdlr_makeSDLRIMAGErawC", (DL_FUNC) &_sdlr_makeSDLRIMAGErawC, 7},
    {"_sdlr_makeSDLRIMAGEnumericU", (DL_FUNC) &_sdlr_makeSDLRIMAGEnumericU, 7},
    {"_sdlr_makeSDLRIMAGErawU", (DL_FUNC) &_sdlr_makeSDLRIMAGErawU, 7},
    {"_sdlr_deleteSDLRIMAGE", (DL_FUNC) &_sdlr_deleteSDLRIMAGE, 1},
    {"_sdlr_replaceSDLRIMAGEraw", (DL_FUNC) &_sdlr_replaceSDLRIMAGEraw, 6},
    {"_sdlr_replaceSDLRIMAGEnumeric", (DL_FUNC) &_sdlr_replaceSDLRIMAGEnumeric, 6},
    {"_sdlr_SDLR_QUIT", (DL_FUNC) &_sdlr_SDLR_QUIT, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_sdlr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
