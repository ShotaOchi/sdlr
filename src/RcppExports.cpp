// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/sdlr.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getAudioDevicesCpp
Rcpp::StringVector getAudioDevicesCpp();
RcppExport SEXP _sdlr_getAudioDevicesCpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getAudioDevicesCpp());
    return rcpp_result_gen;
END_RCPP
}
// makeSDLAUDIO
Rcpp::XPtr<SDLAUDIO> makeSDLAUDIO(const std::string& file);
RcppExport SEXP _sdlr_makeSDLAUDIO(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLAUDIO(file));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLAUDIOint
Rcpp::XPtr<SDLAUDIO> makeSDLAUDIOint(const std::string& file, const int idx_dev);
RcppExport SEXP _sdlr_makeSDLAUDIOint(SEXP fileSEXP, SEXP idx_devSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const int >::type idx_dev(idx_devSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLAUDIOint(file, idx_dev));
    return rcpp_result_gen;
END_RCPP
}
// makeSDLAUDIOstring
Rcpp::XPtr<SDLAUDIO> makeSDLAUDIOstring(const std::string& file, const std::string& devname);
RcppExport SEXP _sdlr_makeSDLAUDIOstring(SEXP fileSEXP, SEXP devnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type devname(devnameSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSDLAUDIOstring(file, devname));
    return rcpp_result_gen;
END_RCPP
}
// clearSDLAUDIO
void clearSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_clearSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    clearSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// getstatusSDLAUDIO
Rcpp::StringVector getstatusSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_getstatusSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getstatusSDLAUDIO(ptr));
    return rcpp_result_gen;
END_RCPP
}
// pauseSDLAUDIO
void pauseSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_pauseSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    pauseSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// unpauseSDLAUDIO
void unpauseSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_unpauseSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    unpauseSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}
// queueSDLAUDIO
void queueSDLAUDIO(Rcpp::XPtr<SDLAUDIO> ptr);
RcppExport SEXP _sdlr_queueSDLAUDIO(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<SDLAUDIO> >::type ptr(ptrSEXP);
    queueSDLAUDIO(ptr);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sdlr_getAudioDevicesCpp", (DL_FUNC) &_sdlr_getAudioDevicesCpp, 0},
    {"_sdlr_makeSDLAUDIO", (DL_FUNC) &_sdlr_makeSDLAUDIO, 1},
    {"_sdlr_makeSDLAUDIOint", (DL_FUNC) &_sdlr_makeSDLAUDIOint, 2},
    {"_sdlr_makeSDLAUDIOstring", (DL_FUNC) &_sdlr_makeSDLAUDIOstring, 2},
    {"_sdlr_clearSDLAUDIO", (DL_FUNC) &_sdlr_clearSDLAUDIO, 1},
    {"_sdlr_getstatusSDLAUDIO", (DL_FUNC) &_sdlr_getstatusSDLAUDIO, 1},
    {"_sdlr_pauseSDLAUDIO", (DL_FUNC) &_sdlr_pauseSDLAUDIO, 1},
    {"_sdlr_unpauseSDLAUDIO", (DL_FUNC) &_sdlr_unpauseSDLAUDIO, 1},
    {"_sdlr_queueSDLAUDIO", (DL_FUNC) &_sdlr_queueSDLAUDIO, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sdlr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
